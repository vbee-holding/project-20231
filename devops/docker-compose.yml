version: '3.3'
services:
  elasticsearch:
    build:
      context: ./elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch_project20231
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: "project20231"
    networks:
      - project20231

  logstash:
    build:
      context: ./logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
    #   - "5000:5000"
    #   - "9600:9600"
    # expose: 
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - project20231
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: ./kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    environment:
        ELASTICSEARCH_USERNAME: kibana
        ELASTICSEARCH_URL: http://elasticsearch:9200
        ELASTICSEARCH_PASSWORD: "project20231"
    #   ELASTICSEARCH_SERVICEACCOUNTTOKEN: AAEAAWVsYXN0aWMva2liYW5hL3Rva2VuMTpaM1YzQVpTMFFVNmhQU3UzczlmLUpn
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - project20231
    depends_on:
      - elasticsearch

  filebeat:
    build: ./filebeat
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ../backend/src/log:/usr/src/app
    networks:
      - project20231
    depends_on: 
      - logstash
      - elasticsearch
      - kibana
    links: 
      - logstash

  # nginx:
  #   build: ./nginx
  #   volumes:
  #     - ./nginx/config:/etc/nginx/conf.d
  #     - ./nginx/log:/var/log/nginx
  #   ports:
  #     - "3000:80"
  #     - "3003:443"
  #   links:
  #     - app-project20231:app-project20231
  #   depends_on: 
  #     - app-project20231
  #   networks:
  #     - project20231

  # app-project20231-fe:
  #   build : 
  #     context: ../frontend
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ../frontend/:/usr/frontend
  #     - /usr/src/frontend/node_modules/
  #   command: npm run dev
  #   ports:
  #     - "3003:3000"
  #   depends_on: 
  #     - app-project20231
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"

<<<<<<< HEAD
  # app-project20231:
  #   build : 
  #     context: ../backend
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ../backend/:/usr/app
  #     - ../backend/src/log:/var/log/app-project20231
  #     - /usr/src/app/node_modules/
  #   command: npm start
  #   ports:
  #     - "3333:3003"
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"

  # alertmanager:
  #   image: prom/alertmanager:v0.24.0
  #   container_name: alertmanager
  #   volumes:
  #     - ./alertmanager:/etc/alertmanager
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  #   restart: always
  #   expose:
  #     - 9093
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"


  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #   env_file:
  #     - config
  #   restart: always
  #   expose:
  #     - 3000
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"

  # prometheus:
  #   image: prom/prometheus:v2.38.0
  #   container_name: prometheus
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   restart: always
  #   expose:
  #     - 9090
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"  

  # caddy:
  #   image: caddy:2.3.0
  #   container_name: caddy
  #   ports:
  #     - "3000:3000"
  #     - "9090:9090"
  #     - "8080:8080"
  #     - "9093:9093"
  #     - "9091:9091"
  #     - "3100:3100"
  #   volumes:
  #     - ./caddy:/etc/caddy
  #   environment:
  #     - ADMIN_USER=${ADMIN_USER:-admin}
  #     - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
  #     - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH:-JDJhJDE0JE91S1FrN0Z0VEsyWmhrQVpON1VzdHVLSDkyWHdsN0xNbEZYdnNIZm1pb2d1blg4Y09mL0ZP}
  #   restart: always
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"

  # nodeexporter:
  #   image: prom/node-exporter:v1.3.1
  #   container_name: nodeexporter
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - '--path.procfs=/host/proc'
  #     - '--path.rootfs=/rootfs'
  #     - '--path.sysfs=/host/sys'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   restart: always
  #   expose:
  #     - 9100
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"

  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.45.0
  #   container_name: cadvisor
  #   privileged: true
  #   devices:
  #     - /dev/kmsg:/dev/kmsg
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker:/var/lib/docker:ro
  #     #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
  #   restart: always
  #   expose:
  #     - 8080
  #   networks:
  #     - project20231
  #   labels:
  #     org.label-schema.group: "monitoring"
=======
  app-project20231:
    build : 
      context: ../backend
      dockerfile: Dockerfile
    volumes:
      - ./app:/usr/app
      - ./app/log:/var/log/app
      - /usr/src/app/node_modules/
    command: npm start
    ports:
      - "3003:3003"
    networks:
      - project20231
>>>>>>> master

networks:
  project20231:
    driver: bridge
volumes:
  elasticsearch_project20231:
  prometheus_data: {}
  grafana_data: {}